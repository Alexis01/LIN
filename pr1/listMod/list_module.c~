/*
 *  hello-5.c - Demonstrates command line argument passing to a module.
 */
#include <linux/module.h>
#include <linux/moduleparam.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/stat.h>
#include <linux/vmalloc.h>
#include <linux/ftrace.h>
#include <linux/proc_fs.h>
#include <asm-generic/uaccess.h>
#include "list.h"


MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("List module - FDI-UCM");
MODULE_AUTHOR("Alexis Cumbal Calderón");

#define BUFFER_LENGTH       PAGE_SIZE
struct item {
	int info;
	struct list_head list_member;
};

void add_node(int arg, struct list_head *head){
    struct item *itemPtr = (struct item *)vmalloc(sizeof(struct item));
    itemPtr->info = arg;
    INIT_LIST_HEAD(&itemPtr->list_member);
    list_add(&itemPtr->list_member, head);
}

void display(struct list_head *head){
    struct list_head *iter;
    struct item *objPtr;

    list_for_each(iter, head) {
        objPtr = list_entry(iter, struct item, list_member);
        printk("%d ", objPtr->info);
    }
    printk("\n");
}

void delete_all(struct list_head *head){
    struct list_head *iter;
    struct item *objPtr;
    redo:
        list_for_each(iter, head) {
            objPtr = list_entry(iter, struct item, list_member);
            list_del(&objPtr->list_member);
            vfree(objPtr);
            goto redo;
        }
}
int find_first_and_delete(int arg, struct list_head *head){
    struct list_head *iter;
    struct item *objPtr;

    list_for_each(iter, head) {
        objPtr = list_entry(iter, struct item, list_member);
        if(objPtr->info == arg) {
            list_del(&objPtr->list_member);
            vfree(objPtr);
            return 1;
        }
    }
    return 0;
}

//Entrada 
#define BUFFER_LENGTH       PAGE_SIZE
static struct proc_dir_entry *proc_entry;
static char *modlist;  // Space for the "clipboard"
static ssize_t modlist_write ( struct file *filp, const char __user *buf, size_t len, loff_t *off  ){
	int available_space = BUFFER_LENGTH - 1;
	if( (*off) > 0 ){
		printk(KERN_INFO "The application can write in this entry just once !!\n");
		return 0;
	}
	if( len > available_space ){
		printk(KERN_INFO "clipboard: not enough space!!\n");
    	return -ENOSPC;
	}
	/*Pasamos datos desde el espacio de usuario
		al espacio de kernel */
	if( copy_from_user( &modlist[0], buf, len ) ){
		return -EFAULT;
	}

	modlist[ len ] = '\0'; /*añadimos fin de escritura*/
	*off += len; /* actualizamos el puntero del fichero */
	printk("Current value of modlist is : %s\n",modlist);

	return len;

}

static ssize_t modlist_read ( struct file *filp, char __user *buf, size_t len, loff_t *off ){
	int nr_bytes;
	if( (*off) > 0 ){
		printk(KERN_INFO "Tell the application that there is nothing left to read !!\n");
		return 0;
	}
	
	nr_bytes = strlen( modlist );
	if( len < nr_bytes ){
		return -ENOSPC;
	}

	/*Pasamos datos desde el espacio de kernel
		al espacio de usuario */
	if( copy_to_user( buf, modlist, nr_bytes ) ){
		return -EINVAL;
	}
	(*off) += len;

	return nr_bytes;

}

static const struct file_operations proc_entry_fops = {
	.read = modlist_read,
	.write = modlist_write,
};

int createEntry(void){
    int ret = 0;

	printk(KERN_INFO "Modulo LIN cargado. Hola kernel.\n");
	printk("modulo ON\n");
	modlist = (char *) vmalloc( BUFFER_LENGTH );
	if(!modlist){
		ret = -ENOMEM;
	}else{
		memset( modlist, 0, BUFFER_LENGTH );
		proc_entry = proc_create( "modlist", 0666, NULL, &proc_entry_fops );
		if( proc_entry == NULL ){
			ret = -ENOMEM;
			vfree( modlist );
			printk(KERN_INFO "Modlist: Can't create /proc/modlist entry\n");
		}else{
			printk(KERN_INFO "Modlist: Module loaded\n");
		} 
	}
	return ret;
}

static int __init list_module_init(void){
	printk(KERN_INFO "ListMod: Loaded\n");
    if( createEntry() != 0 ){
        printk(KERN_INFO "Cannot create entry!!\n");
    	return -ENOSPC;
    }else{
        LIST_HEAD(itemHead);
        add_node(10, &itemHead);
        add_node(20, &itemHead);
        add_node(25, &itemHead);
        add_node(30, &itemHead);
        display(&itemHead);
        find_first_and_delete(20, &itemHead);
        printk(KERN_INFO "ListMod: Removed first\n");
        display(&itemHead);
        printk(KERN_INFO "ListMod: Removed all\n");
        delete_all(&itemHead);
        display(&itemHead);
        return 0;
    }
	
}
static void __exit list_module_exit(void){
    remove_proc_entry("modlist", NULL);
	vfree( modlist );
	printk(KERN_INFO "ListMod: Removed\n");
}

module_init(list_module_init);
module_exit(list_module_exit);